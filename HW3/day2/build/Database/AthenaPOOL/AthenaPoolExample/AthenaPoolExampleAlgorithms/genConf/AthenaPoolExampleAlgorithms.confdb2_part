{
    'AthPoolEx::PassNoneFilter': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:19',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 1, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
        },
    },
    'AthPoolEx::QueryTag': {
        '__component_type__': 'AlgTool',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:21',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgTool,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgTool,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [AlgTool]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [AlgTool]'''),
            'AuditTools': ('bool', False, '''[[deprecated]] unused [AlgTool]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [AlgTool]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [AlgTool]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [AlgTool]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [AlgTool]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [AlgTool]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [AlgTool]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
        },
    },
    'AthPoolEx::ReWriteData': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:14',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'ExampleHitKey': ('SG::ReadHandleKey<ExampleHitContainer>', DataHandle('StoreGateSvc+MyHits','R','ExampleHitContainer',False), ''' [AthPoolEx::ReWriteData]'''),
            'ExampleTrackKey': ('SG::WriteHandleKey<ExampleTrackContainer>', DataHandle('StoreGateSvc+MyTracks','W','ExampleTrackContainer',False), ''' [AthPoolEx::ReWriteData]'''),
        },
    },
    'AthPoolEx::ReadCond': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:17',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 1, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
        },
    },
    'AthPoolEx::ReadData': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:15',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DataHeaderKey': ('SG::ReadHandleKey<DataHeader>', DataHandle('StoreGateSvc+EventSelector','R','DataHeader',False), ''' [AthPoolEx::ReadData]'''),
            'ExampleTrackKey': ('SG::ReadHandleKey<ExampleTrackContainer>', DataHandle('StoreGateSvc+MyTracks','R','ExampleTrackContainer',False), ''' [AthPoolEx::ReadData]'''),
            'ExampleHitKey': ('SG::ReadHandleKey<ExampleHitContainer>', DataHandle('StoreGateSvc+MyHits','R','ExampleHitContainer',False), ''' [AthPoolEx::ReadData]'''),
        },
    },
    'AthPoolEx::ReadExampleElectron': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:23',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'ExampleElectronContainerName': ('SG::ReadHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer','R','xAOD::ExampleElectronContainer',False), ''' [AthPoolEx::ReadExampleElectron]'''),
            'ExampleElectronContainerDecorKey1': ('SG::ReadHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor1','R','xAOD::ExampleElectronContainer',False), '''decorator1 key [AthPoolEx::ReadExampleElectron]'''),
            'ExampleElectronContainerDecorKeyFloat': ('SG::ReadHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor_float','R','xAOD::ExampleElectronContainer',False), '''decorator for float key [AthPoolEx::ReadExampleElectron]'''),
            'ExampleElectronContainerDecorKeyHayden': ('SG::ReadHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor_Hayden','R','xAOD::ExampleElectronContainer',False), '''decorator for Hayden’s favorite data type (double) [AthPoolEx::ReadExampleElectron]'''),
        },
    },
    'AthPoolEx::ReadMeta': {
        '__component_type__': 'AlgTool',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:20',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgTool,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgTool,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [AlgTool]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [AlgTool]'''),
            'AuditTools': ('bool', False, '''[[deprecated]] unused [AlgTool]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [AlgTool]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [AlgTool]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [AlgTool]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [AlgTool]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [AlgTool]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [AlgTool]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
        },
    },
    'AthPoolEx::WriteCond': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:16',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'ExampleHitKey': ('SG::ReadHandleKey<ExampleHitContainer>', DataHandle('StoreGateSvc+MyHits','R','ExampleHitContainer',False), ''' [AthPoolEx::WriteCond]'''),
            'ConditionName': ('std::string', 'PedestalWriteData', '''none [unknown owner type]'''),
            'Weight': ('double', 0.0000000, '''none [unknown owner type]'''),
            'Offset': ('double', 0.0000000, '''none [unknown owner type]'''),
        },
    },
    'AthPoolEx::WriteData': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:13',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'ExampleHitKey': ('SG::WriteHandleKey<ExampleHitContainer>', DataHandle('StoreGateSvc+MyHits','W','ExampleHitContainer',False), ''' [AthPoolEx::WriteData]'''),
            'AliasKey': ('SG::WriteHandleKey<ExampleHitContainer>', DataHandle('StoreGateSvc+PetersHits','W','ExampleHitContainer',False), ''' [AthPoolEx::WriteData]'''),
        },
    },
    'AthPoolEx::WriteExampleElectron': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:22',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'ExampleTrackKey': ('SG::ReadHandleKey<ExampleTrackContainer>', DataHandle('StoreGateSvc+MyTracks','R','ExampleTrackContainer',False), ''' [AthPoolEx::WriteExampleElectron]'''),
            'ExampleHitKey': ('SG::ReadHandleKey<ExampleHitContainer>', DataHandle('StoreGateSvc+MyHits','R','ExampleHitContainer',False), ''' [AthPoolEx::WriteExampleElectron]'''),
            'ExampleElectronContainerName': ('SG::WriteHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer','W','xAOD::ExampleElectronContainer',False), ''' [AthPoolEx::WriteExampleElectron]'''),
            'ExampleElectronContainerDecorKey1': ('SG::WriteHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor1','W','xAOD::ExampleElectronContainer',False), '''decorator1 key [AthPoolEx::WriteExampleElectron]'''),
            'ExampleElectronContainerDecorKey2': ('SG::WriteHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor2','W','xAOD::ExampleElectronContainer',False), '''decorator2 key [AthPoolEx::WriteExampleElectron]'''),
            'ExampleElectronContainerDecorKeyFloat': ('SG::WriteHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor_float','W','xAOD::ExampleElectronContainer',False), '''decorator for float key [AthPoolEx::WriteExampleElectron]'''),
            'ExampleElectronContainerDecorKeyLongDouble': ('SG::WriteHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor_longdouble','W','xAOD::ExampleElectronContainer',False), '''decorator for long double key [AthPoolEx::WriteExampleElectron]'''),
            'ExampleElectronContainerDecorKeyHayden': ('SG::WriteHandleKey<DataVector<xAOD::ExampleElectron_v1,DataModel_detail::NoBase> >', DataHandle('StoreGateSvc+TestContainer.decor_Hayden','W','xAOD::ExampleElectronContainer',False), '''decorator for my favorite data type - double [AthPoolEx::WriteExampleElectron]'''),
        },
    },
    'AthPoolEx::WriteTag': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'AthenaPoolExampleAlgorithms_entries.cxx:18',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Asynchronous': ('bool', False, '''whether algorithm is asynchronous and uses Boost Fiber to suspend while offloaded code is running. [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'EvtStore': ('ServiceHandle', ServiceHandle('StoreGateSvc'), '''Handle to a StoreGateSvc instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'DetStore': ('ServiceHandle', ServiceHandle('StoreGateSvc/DetectorStore'), '''Handle to a StoreGateSvc/DetectorStore instance: it will be used to retrieve data during the course of the job [unknown owner type]'''),
            'Key': ('SG::WriteHandleKey<AthenaAttributeList>', DataHandle('StoreGateSvc+RunEventTag','W','AthenaAttributeList',False), ''' [AthPoolEx::WriteTag]'''),
            'TagKey': ('SG::WriteHandleKey<TagAthenaAttributeList>', DataHandle('StoreGateSvc+RunEventTag','W','TagAthenaAttributeList',False), ''' [AthPoolEx::WriteTag]'''),
            'Magic': ('int', 0, '''none [unknown owner type]'''),
        },
    },
}
